Load Balancer and Algorithms

Load balancers are crucial components in distributed systems that distribute incoming network traffic across multiple servers. This ensures no single server becomes a bottleneck, improving performance, reliability, and availability.


A load balancer acts as a reverse proxy that distributes client requests to multiple backend servers. It sits between the client and the server pool and makes real-time decisions based on various algorithms and metrics.



1. Round Robin
Distributes requests in a circular order across servers.
* ğŸ”¹ Simple and fast
* ğŸ”¹ Doesn't account for server load
ğŸ“Œ Use case: When all servers are equally capable.




2. Weighted Round Robin
Each server gets a weight; servers with higher weights get more requests.
* ğŸ”¹ Supports uneven server capacity
* ğŸ”¹ Slightly more complex
ğŸ“Œ Use case: When servers have different processing power.



3. Least Connections
Sends traffic to the server with the fewest active connections.
* ğŸ”¹ Dynamic load handling
* ğŸ”¹ Ideal for long-lived sessions
ğŸ“Œ Use case: Real-time applications like VoIP or video calls.


4. Weighted Least Connections
Adds weights to the least-connections strategy.
* ğŸ”¹ Combines connection count and server capability
ğŸ“Œ Use case: Mixed environments with varying server strengths and session lengths.


5. Least Response Time
Directs traffic to the server with the lowest average response time.
* ğŸ”¹ Measures server responsiveness
* ğŸ”¹ Good for latency-sensitive apps
ğŸ“Œ Use case: APIs or microservices where speed is critical.


6. IP Hash
A hash of the client's IP determines the server.
* ğŸ”¹ Ensures session persistence (same client hits same server)
* ğŸ”¹ Poor load distribution if IPs aren't diverse
ğŸ“Œ Use case: Sticky sessions (e.g., login sessions, shopping carts).



7. URL Hash (or Path-based)
Hashing based on URL/path to route requests.
* ğŸ”¹ Useful for content caching
* ğŸ”¹ Ensures the same content is served from the same server
ğŸ“Œ Use case: CDNs or microservices where different endpoints go to different servers.



8. Random
Randomly selects a server for each request.
* ğŸ”¹ Super simple
* ğŸ”¹ Surprisingly effective in certain cases
ğŸ“Œ Use case: Light-load environments or where randomness helps avoid predictable load.



9. Custom (Application-Aware)
Uses application-specific logicâ€”like server CPU load, memory, or real-time health.
* ğŸ”¹ Most intelligent
* ğŸ”¹ Often requires integration with monitoring tools
ğŸ“Œ Use case: Mission-critical systems with variable workloads.


Load Balancer Types
* Hardware Load Balancers (e.g., F5, Citrix ADC)
* Software Load Balancers (e.g., HAProxy, Nginx, Apache)
* Cloud-based Load Balancers (e.g., AWS ELB, Azure Load Balancer, Google Cloud Load Balancing)
